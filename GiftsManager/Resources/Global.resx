<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddEvent" xml:space="preserve">
    <value>Add an event</value>
  </data>
  <data name="AddGift" xml:space="preserve">
    <value>Add a gift</value>
  </data>
  <data name="AddUser" xml:space="preserve">
    <value>Add a user</value>
  </data>
  <data name="Bought" xml:space="preserve">
    <value>Bought !</value>
  </data>
  <data name="BoughtBy" xml:space="preserve">
    <value>Bought By</value>
  </data>
  <data name="BoughtGifts" xml:space="preserve">
    <value>Bought Gifts</value>
  </data>
  <data name="BuyIt" xml:space="preserve">
    <value>Buy it</value>
  </data>
  <data name="Complete" xml:space="preserve">
    <value>Complete</value>
  </data>
  <data name="ConfirmYourPassword" xml:space="preserve">
    <value>Confirm your Password</value>
  </data>
  <data name="EnterCost" xml:space="preserve">
    <value>Enter the cost of the gift</value>
  </data>
  <data name="EnterEmail" xml:space="preserve">
    <value>Enter the user email</value>
  </data>
  <data name="EventAlreadyExist" xml:space="preserve">
    <value>This event already exist</value>
  </data>
  <data name="EventName" xml:space="preserve">
    <value>Enter event name</value>
  </data>
  <data name="FirstName" xml:space="preserve">
    <value>FirstName</value>
  </data>
  <data name="Gift" xml:space="preserve">
    <value>Gift</value>
  </data>
  <data name="GiftAlreadyExist" xml:space="preserve">
    <value>This gift already exist</value>
  </data>
  <data name="GiftBought" xml:space="preserve">
    <value>You have now bought this gift.</value>
  </data>
  <data name="GiftName" xml:space="preserve">
    <value>Enter gift name</value>
  </data>
  <data name="GiftReserved" xml:space="preserve">
    <value>You have now reserved this gift.</value>
  </data>
  <data name="GiftsIdeas" xml:space="preserve">
    <value>Gifts Ideas</value>
  </data>
  <data name="GroupAlreadyExist" xml:space="preserve">
    <value>This group already exist</value>
  </data>
  <data name="GroupName" xml:space="preserve">
    <value>Enter group name</value>
  </data>
  <data name="HasBeenAdded" xml:space="preserve">
    <value>has been added !</value>
  </data>
  <data name="HasBeenBought" xml:space="preserve">
    <value>has been bought !</value>
  </data>
  <data name="HasBeenCreated" xml:space="preserve">
    <value>has been created !</value>
  </data>
  <data name="HasBeenRemoved" xml:space="preserve">
    <value>has been removed !</value>
  </data>
  <data name="Hi" xml:space="preserve">
    <value>Hi</value>
  </data>
  <data name="HomePage" xml:space="preserve">
    <value>Home Page</value>
  </data>
  <data name="InvalidEmail" xml:space="preserve">
    <value>You must enter a valid email</value>
  </data>
  <data name="LastName" xml:space="preserve">
    <value>LastName</value>
  </data>
  <data name="MembersList" xml:space="preserve">
    <value>Members List</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NeedNewAccount" xml:space="preserve">
    <value>Need new account ?</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="NoEvent" xml:space="preserve">
    <value>There is no event in this group</value>
  </data>
  <data name="NoGroup" xml:space="preserve">
    <value>There is no group for this user</value>
  </data>
  <data name="Open" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PleaseSignIn" xml:space="preserve">
    <value>Please Sign In to proceed</value>
  </data>
  <data name="PriceError" xml:space="preserve">
    <value>You must enter a valid price</value>
  </data>
  <data name="Profile" xml:space="preserve">
    <value>Profile</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="RemoveEvent" xml:space="preserve">
    <value>Remove event</value>
  </data>
  <data name="RemoveEventConfirmation" xml:space="preserve">
    <value>Are you sure to remove this event</value>
  </data>
  <data name="RemoveGift" xml:space="preserve">
    <value>Remove gift</value>
  </data>
  <data name="RemoveGiftConfirmation" xml:space="preserve">
    <value>Are you sure to remove this gift from your wishlist</value>
  </data>
  <data name="RemoveGiftReservation" xml:space="preserve">
    <value>Are you sure to remove this item from your reserved gifts</value>
  </data>
  <data name="RemoveGroup" xml:space="preserve">
    <value>Remove Group</value>
  </data>
  <data name="RemoveGroupConfirmation" xml:space="preserve">
    <value>Are you sure to remove this group</value>
  </data>
  <data name="RemoveUser" xml:space="preserve">
    <value>Remove user</value>
  </data>
  <data name="RemoveUserConfirmation" xml:space="preserve">
    <value>Are you sure to remove this user</value>
  </data>
  <data name="Reserved" xml:space="preserve">
    <value>Reserved !</value>
  </data>
  <data name="ReservedBy" xml:space="preserve">
    <value>Reserved By</value>
  </data>
  <data name="ReservedGifts" xml:space="preserve">
    <value>Reserved Gifts</value>
  </data>
  <data name="ReserveIt" xml:space="preserve">
    <value>Reserve it</value>
  </data>
  <data name="Select" xml:space="preserve">
    <value>Please select an option</value>
  </data>
  <data name="SelectEvent" xml:space="preserve">
    <value>Select an Event</value>
  </data>
  <data name="SelectGroup" xml:space="preserve">
    <value>Select a group</value>
  </data>
  <data name="SignIn" xml:space="preserve">
    <value>Sign In</value>
  </data>
  <data name="SignOut" xml:space="preserve">
    <value>Sign Out</value>
  </data>
  <data name="SignUp" xml:space="preserve">
    <value>Sign Up</value>
  </data>
  <data name="TakeIt" xml:space="preserve">
    <value>Take it</value>
  </data>
  <data name="User" xml:space="preserve">
    <value>User</value>
  </data>
  <data name="UserNotExist" xml:space="preserve">
    <value>This user does not exist</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Welcome to Gifts Manager</value>
  </data>
  <data name="WishList" xml:space="preserve">
    <value>WishList</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
</root>